apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: auditoria-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# AUDITORIA DB
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  auditoria-db
  labels:
    app: auditoria-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app:  auditoria-db
  template:
    metadata:
      labels:
        app:  auditoria-db
    spec:
      containers:
      - name: auditoria-db
        image: postgres:latest
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "256Mi"
            cpu: "300m"
            ephemeral-storage: "2Gi"
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: sta-db-secrets
              key: auditoria-db-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sta-db-secrets
              key: auditoria-db-password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: sta-config
              key: AUDITORIA_DB_NAME
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -d
            - $(POSTGRES_DB)
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        volumeMounts:
        - name: auditoria-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: auditoria-data
        persistentVolumeClaim:
          claimName: auditoria-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: auditoria-db
spec:
  selector:
    app: auditoria-db
  ports:
  - port: 5432
    targetPort: 5432  
---
# AUDITORIA APP
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auditoria
  labels:
    app: auditoria
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auditoria
  template:
    metadata:
      labels:
        app: auditoria
    spec:
      containers:
      - name: auditoria
        image: us-central1-docker.pkg.dev/saludtech-alpes/sta-images/auditoria:latest
        command: ["flask", "--app", "api", "run", "--host", "0.0.0.0", "--port", "8002", "--debugger"]
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "256Mi"
            cpu: "300m"
            ephemeral-storage: "2Gi"
        ports:
        - containerPort: 8002
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: sta-db-secrets
              key: auditoria-db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sta-db-secrets
              key: auditoria-db-password
        - name: DB_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: sta-config
              key: AUDITORIA_DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: sta-config
              key: AUDITORIA_DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: sta-config
              key: AUDITORIA_DB_NAME
        - name: BROKER_HOST
          valueFrom:
            configMapKeyRef:
              name: sta-config
              key: BROKER_HOST
---      
# HEALTHCHECK
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: auditoria-config
spec:
  healthCheck:
    checkIntervalSec: 60
    port: 8002
    type: HTTP
    requestPath: /auditoria/health
---
apiVersion: v1
kind: Service
metadata:
  name: auditoria-service
  annotations:
    cloud.google.com/backend-config: '{"default": "auditoria-config"}'
spec:
  selector:
    app: auditoria
  type: NodePort
  ports:
    - port: 80
      targetPort: 8002
      protocol: TCP
      nodePort: 31021
